floor(bwNeweyWest(lr))
#------------------------------------------------------------------------------#
# Simualtion study comparing different methods (Prais-Wimnsten, Newey West,    #
# ARMA) for handling autocorrelation in interrupted time series.               #
# Code generates simulated datasets and produces estimates and standard errors #
# for subsequent analysis of performance                                       #
#------------------------------------------------------------------------------#
library(MASS)
library(prais)
library(sandwich)
library(forecast)
library(sfsmisc)
set.seed(1066)
# Function to generate correlation matrix
# Input:
# 1) ITS length (n)
# 2) vector of lag1-lag3 correlations (r)
# Output: n x n correlation matrix
genCorrMat <- function(n, r) {
rmat <- diag(1, n)
for(i in 1:n) {
for(j in 1:n) {
if (abs(i-j) == 1) {
rmat[i,j] <- r[1]
}
if (abs(i-j) == 2) {
rmat[i,j] <- r[2]
}
if (abs(i-j) == 3) {
rmat[i,j] <- r[3]
}
}
}
rmat <- posdefify(rmat)
return(rmat)
}
# Function to generate data
# Input: vector of parameter values (r1, r2, r3, n, b1, b2, b3, sd)
# Output: dataframe (y=ITS, x=intervention indicator, t=time)
genDat <- function(param) {
r <- param[1:3]
n <- param[4]
b <- param[5:7]
sdv <- param[8]
x <- c( rep( 0, n/2 ), rep( 1, n/2 ) )
t <- 1:n
mu <- b[1] + b[2] * x + b[3] * t
rmat <- genCorrMat(n, r)
e <- mvrnorm(1, rep(0, n), sdv^2*rmat )
y <- mu + e
return(data.frame(y, x, t))
}
# Function to suppress output (Hadley Wickham)
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
# Function to fit models
# Input: dataframe (y, x, t)
# Output: dataframe of parameter estimates and standard errors
fitMods <- function(df) {
# Linear regression
lr <- lm(y ~ x + t, data = df)
est_lr <- coef(lr)["x"]
se_lr <- sqrt(vcov(lr)["x", "x"])
# Prais Winsten
pw <- quiet(prais_winsten(y ~ x + t, data = df))
est_pw <- coef(pw)["x"]
se_pw <- sqrt(vcovHC.prais(pw)["x", "x"])
# ARMA
aa <- auto.arima(df$y,
xreg = cbind(df$x, df$t),
stepwise = T,
d = 0,
D = 0,
ic = 'aicc',
seasonal = F)
converge_aa <- ifelse(sum(diag(vcov(aa)) <= 0) > 0, 0, 1)
est_aa <- ifelse(converge_aa == 1,
coef(aa)["xreg1"],
NaN
)
se_aa <- ifelse(converge_aa == 1,
sqrt(vcov(aa)["xreg1","xreg1"]),
NaN
)
# Newey West
se_nw <- sqrt(NeweyWest(lr,
lag = NULL,
prewhite = F,
adjust = T)["x", "x"]
)
# Combine and output estimates and standard errors
est <- c(est_lr, est_pw, est_aa, est_lr)
se <- c(se_lr, se_pw, se_aa, se_nw)
cbind(est, se)
}
# Matrix of parameter values (r1-r3, n, b1-b3, sd)
# Each row represents a different scenario
nr <- 20
r1values <- sort(runif(nr, min = 0, max = 0.8))
r2values <- runif(nr, min = 0, max = r1values)
r3values <- runif(nr, min = 0, max = r2values)
nvalues  <- c(20, 50, 100, 300)
nn <- length(nvalues)
b1 <- 4
b2 <- -1
b3 <- -1
sdv <- 1
param <- cbind(
rep(r1values, each = nn),
rep(r2values, each = nn),
rep(r3values, each = nn),
rep(nvalues, nr),
rep(b1, nr * nn),
rep(b2, nr * nn),
rep(b3, nr * nn),
rep(sdv, nr * nn)
)
colnames(param) <- c("r1", "r2", "r3", "n", "b1", "b2", "b3", "sd")
param[ , "b3"] <-  param[ , "b3"] / param[ , "n"]
# Models fitted to n=2000 simulated datasets for each scenario
# Parameters and standard errors stored in matrix "est"
nsim <- 2000
est <- matrix(0, nsim * nrow(param), 2 * ncol(param) + 2)
colnames(est) <- c(
"simno", "scenario",
"r1", "r2", "r3", "n", "b1", "b2", "b3", "sd",
"est1", "est2", "est3", "est4",
"se1", "se2", "se3", "se4"
)
for(i in 1:nrow(param)) {
start_time <- Sys.time()
simRes <- replicate(nsim, fitMods(
genDat(param = param[i, ])
)
)
rows <- ((i - 1) * nsim + 1):(i * nsim)
est[rows, 1] <- 1:nsim
est[rows, 2] <- i
est[rows, 3:10] <- matrix(param[i, ], ncol = 8, nrow = nsim, byrow = T)
est[rows, 11:14] <-  t(simRes[ , 1, ])
est[rows, 15:18] <-  t(simRes[ , 2, ])
end_time <- Sys.time()
print(i)
print(end_time - start_time)
}
# Save results
save(est, file="est.rda")
?prais
?auto.arima
cite
cite()
citation
citation()
versio()
version()
R.version
citation("prais")
citation("forecast")
?prais
?prais_winsten
citation()
#------------------------------------------------------------------------------#
# Evaluation of methods (Prais-Winsten, ARMA and Newey-West) in terms of bias, #
# mean square error and coverage using parameter estimates from simualated     #
# data. Performance measures and Monte Carlo error calculated using rsim       #
# package. Results outputted as a table and as a matrix of plots.              #
#------------------------------------------------------------------------------#
library(tidyverse)
library(wesanderson)
library(rsimsum)
# Plotting function
plotRes <- function(dat, y) {
ggplot(dat, aes(x = n, y = .data[[y]], color = method)) +
geom_line(size = 1.7) +
scale_color_manual(values = wes_palette("IsleofDogs1")) +
theme_bw(base_size = 20) +
theme(legend.position = "top") +
labs(y = y) +
facet_wrap(~autocorr)
}
# Load data and reshape to long format
load("est.rda")
est_long <-
est %>%
as.data.frame() %>%
select(-b1, -b2, -b3, -sd) %>%
mutate(dfres = n-3) %>%
pivot_longer(-c("simno","scenario", "r1", "r2", "r3", "n", "dfres"),
names_to = c(".value", "method"),
names_pattern = "(.+)(.+)"
) %>%
rename(estimate = est)
# Use simsum to calculate performance of each method for each scenario
prfm <-
simsum(est_long, estvarname = "estimate", se = "se", df = "dfres",
true = -1, methodvar = "method", by = "scenario", ref = "1"
)
# Dataframe of results
dfRes <-
prfm$sum %>%
filter(stat == "bias" | stat == "mse" | stat == "cover")  %>%
pivot_wider(names_from = stat, values_from = c("est", "mcse")) %>%
select("scenario", everything())
param <-
est_long[, c( "scenario", "method", "r1", "r2", "r3", "n")] %>%
distinct() %>%
mutate(r1 = format(round(r1, 2))) %>%
mutate(r2 = format(round(r2, 2))) %>%
mutate(r3 = format(round(r3, 2))) %>%
unite("autocorr", "r1", "r2", "r3", sep = "|")  %>%
mutate(scenario = as.factor(scenario)) %>%
mutate(method = as.factor(method))
dfRes <-
param %>%
inner_join(dfRes, by = c("scenario", "method")) %>%
mutate(method = fct_recode(method,
"Linear Reg" = "1",
"Prais Winsten" = "2",
"ARMA" = "3",
"Newey West" = "4"
)
) %>%
rename(bias = est_bias) %>%
rename(coverage = est_cover) %>%
rename(mse = est_mse) %>%
mutate_if(is.numeric, ~round(.,3))
write.csv(dfRes, file = "tabl_perform.csv")
# Summarise results
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
filter(n<50) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
# Graphs: bias, coverage, mse
width <- 10
height <- 1.2 * width
dfRes %>%
filter(method != "Newey West") %>%
plotRes("bias") %>%
ggsave(file = "plot_bias.tiff", height = height, width = width)
dfRes %>%
plotRes("coverage") %>%
ggsave(file = "plot_coverage.tiff", height = height, width = width)
dfRes %>%
filter(method != "Newey West") %>%
mutate(rmse = sqrt(mse)) %>%
plotRes("rmse") %>%
ggsave(file = "plot_rmse.tiff", height = height, width = width)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
filter(n<50) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
#filter(lag1corr<50) %>%
filter((lb_bias > 0 & ub_bias > 0) |  (lb_bias < 0 & ub_bias < 0) )
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
#filter(lag1corr<50) %>%
filter((lb_bias > 0 & ub_bias > 0) |  (lb_bias < 0 & ub_bias < 0) )
view(dfRes)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
#filter(lag1corr<50) %>%
filter((lb_bias > 0 & ub_bias > 0) |  (lb_bias < 0 & ub_bias < 0) )
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
filter(lag1corr<0.6) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
filter(lag1corr>=0.6) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
#filter(n<50) %>%
#filter(lag1corr>=0.6) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
dfRes %>%
mutate(lag1corr = as.numeric(str_sub(autocorr, 1, 4))) %>%
mutate(lb_bias = bias - qnorm(0.975) * mcse_bias) %>%
mutate(ub_bias = bias + qnorm(0.975) * mcse_bias) %>%
filter(n<50) %>%
#filter(lag1corr>=0.6) %>%
group_by(method) %>%
summarise(
bias_mean = mean(bias),
coverage_mean = mean(coverage),
rmse_mean = mean(sqrt(mse)),
)
?posdefify
#------------------------------------------------------------------------------#
# Simualtion study comparing different methods (Prais-Wimnsten, Newey West,    #
# ARMA) for handling autocorrelation in interrupted time series.               #
# Code generates simulated datasets and produces estimates and standard errors #
# for subsequent analysis of performance                                       #
#------------------------------------------------------------------------------#
library(MASS)
library(prais)
library(sandwich)
library(forecast)
library(sfsmisc)
set.seed(1066)
# Function to generate correlation matrix
# Input:
# 1) ITS length (n)
# 2) vector of lag1-lag3 correlations (r)
# Output: n x n correlation matrix
genCorrMat <- function(n, r) {
rmat <- diag(1, n)
for(i in 1:n) {
for(j in 1:n) {
if (abs(i-j) == 1) {
rmat[i,j] <- r[1]
}
if (abs(i-j) == 2) {
rmat[i,j] <- r[2]
}
if (abs(i-j) == 3) {
rmat[i,j] <- r[3]
}
}
}
rmat <- posdefify(rmat)
return(rmat)
}
# Function to generate data
# Input: vector of parameter values (r1, r2, r3, n, b1, b2, b3, sd)
# Output: dataframe (y=ITS, x=intervention indicator, t=time)
genDat <- function(param) {
r <- param[1:3]
n <- param[4]
b <- param[5:7]
sdv <- param[8]
x <- c( rep( 0, n/2 ), rep( 1, n/2 ) )
t <- 1:n
mu <- b[1] + b[2] * x + b[3] * t
rmat <- genCorrMat(n, r)
e <- mvrnorm(1, rep(0, n), sdv^2*rmat )
y <- mu + e
return(data.frame(y, x, t))
}
# Function to suppress output (Hadley Wickham)
quiet <- function(x) {
sink(tempfile())
on.exit(sink())
invisible(force(x))
}
# Function to fit models
# Input: dataframe (y, x, t)
# Output: dataframe of parameter estimates and standard errors
fitMods <- function(df) {
# Linear regression
lr <- lm(y ~ x + t, data = df)
est_lr <- coef(lr)["x"]
se_lr <- sqrt(vcov(lr)["x", "x"])
# Prais Winsten
pw <- quiet(prais_winsten(y ~ x + t, data = df))
est_pw <- coef(pw)["x"]
se_pw <- sqrt(vcovHC.prais(pw)["x", "x"])
# ARMA
aa <- auto.arima(df$y,
xreg = cbind(df$x, df$t),
stepwise = T,
d = 0,
D = 0,
ic = 'aicc',
seasonal = F)
converge_aa <- ifelse(sum(diag(vcov(aa)) <= 0) > 0, 0, 1)
est_aa <- ifelse(converge_aa == 1,
coef(aa)["xreg1"],
NaN
)
se_aa <- ifelse(converge_aa == 1,
sqrt(vcov(aa)["xreg1","xreg1"]),
NaN
)
# Newey West
se_nw <- sqrt(NeweyWest(lr,
lag = NULL,
prewhite = F,
adjust = T)["x", "x"]
)
# Combine and output estimates and standard errors
est <- c(est_lr, est_pw, est_aa, est_lr)
se <- c(se_lr, se_pw, se_aa, se_nw)
cbind(est, se)
}
# Matrix of parameter values (r1-r3, n, b1-b3, sd)
# Each row represents a different scenario
nr <- 20
r1values <- sort(runif(nr, min = 0, max = 0.8))
r2values <- runif(nr, min = 0, max = r1values)
r3values <- runif(nr, min = 0, max = r2values)
nvalues  <- c(20, 50, 100, 300)
nn <- length(nvalues)
b1 <- 4
b2 <- -1
b3 <- -1
sdv <- 1
param <- cbind(
rep(r1values, each = nn),
rep(r2values, each = nn),
rep(r3values, each = nn),
rep(nvalues, nr),
rep(b1, nr * nn),
rep(b2, nr * nn),
rep(b3, nr * nn),
rep(sdv, nr * nn)
)
colnames(param) <- c("r1", "r2", "r3", "n", "b1", "b2", "b3", "sd")
param[ , "b3"] <-  param[ , "b3"] / param[ , "n"]
# Models fitted to n=2000 simulated datasets for each scenario
# Parameters and standard errors stored in matrix "est"
nsim <- 20
est <- matrix(0, nsim * nrow(param), ncol(param) + 2 + 8)
colnames(est) <- c(
"simno", "scenario",
"r1", "r2", "r3", "n", "b1", "b2", "b3", "sd",
"est1", "est2", "est3", "est4",
"se1", "se2", "se3", "se4"
)
for(i in 1:nrow(param)) {
start_time <- Sys.time()
simRes <- replicate(nsim, fitMods(
genDat(param = param[i, ])
)
)
rows <- ((i - 1) * nsim + 1):(i * nsim)
est[rows, 1] <- 1:nsim
est[rows, 2] <- i
est[rows, 3:10] <- matrix(param[i, ], ncol = 8, nrow = nsim, byrow = T)
est[rows, 11:14] <-  t(simRes[ , 1, ])
est[rows, 15:18] <-  t(simRes[ , 2, ])
end_time <- Sys.time()
print(i)
print(end_time - start_time)
}
est
library(roxygen2)
# ITS_Autocorrelation
<p>Data, code and results for paper on autocorrelation in interrupted time serie<p>
* *analy_pneumo_ex*: analysis of pneumococcal vaccine example
* *data_pneumo_ex*: data used in pneumococcal vaccine example
* *est*: estimates and standard errors generated by *sim*
* *sim*: fits models to simulated data and outputs estimates and standard
errors to the file *est*
* *perform*: generates table of performance results (bias, mean square error and coverage)
and plots of these results
* *tabl_perform*: table of performance results generated by *perform*
* *plot_bias*: plot of bias generated by *perform*
* *plot_mse*: plot of mean square error generated by *perform*
* *plot_coverage*: plot of coverage generated by *perform*
